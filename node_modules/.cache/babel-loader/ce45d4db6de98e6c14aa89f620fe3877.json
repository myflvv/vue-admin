{"remainingRequest":"/home/nothing/data/vue/mall-vue3-manage/node_modules/babel-loader/lib/index.js!/home/nothing/data/vue/mall-vue3-manage/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/nothing/data/vue/mall-vue3-manage/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/nothing/data/vue/mall-vue3-manage/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/nothing/data/vue/mall-vue3-manage/src/components/VueImageVerify.vue?vue&type=template&id=1d03f37e","dependencies":[{"path":"/home/nothing/data/vue/mall-vue3-manage/src/components/VueImageVerify.vue","mtime":1615423561118},{"path":"/home/nothing/data/vue/mall-vue3-manage/node_modules/cache-loader/dist/cjs.js","mtime":1589968278364},{"path":"/home/nothing/data/vue/mall-vue3-manage/node_modules/babel-loader/lib/index.js","mtime":1614068612755},{"path":"/home/nothing/data/vue/mall-vue3-manage/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1614935255022},{"path":"/home/nothing/data/vue/mall-vue3-manage/node_modules/cache-loader/dist/cjs.js","mtime":1589968278364},{"path":"/home/nothing/data/vue/mall-vue3-manage/node_modules/vue-loader-v16/dist/index.js","mtime":1614935255022}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrIH0gZnJvbSAidnVlIjsKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJpbWctdmVyaWZ5Igp9OwpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMSwgW19jcmVhdGVWTm9kZSgiY2FudmFzIiwgewogICAgcmVmOiAidmVyaWZ5IiwKICAgIHdpZHRoOiAkZGF0YS53aWR0aCwKICAgIGhlaWdodDogJGRhdGEuaGVpZ2h0LAogICAgb25DbGljazogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiAkb3B0aW9ucy5oYW5kbGVEcmF3ICYmICRvcHRpb25zLmhhbmRsZURyYXcuYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICB9KQogIH0sIG51bGwsIDgKICAvKiBQUk9QUyAqLwogICwgWyJ3aWR0aCIsICJoZWlnaHQiXSldKTsKfQ=="},{"version":3,"sources":["/home/nothing/data/vue/mall-vue3-manage/src/components/VueImageVerify.vue"],"names":[],"mappings":";;AACS,EAAA,KAAK,EAAC;;;uBAAX,YAAA,CAEM,KAFN,EAAA,UAAA,EAEM,CADF,YAAA,CAAkF,QAAlF,EAAkF;AAA1E,IAAA,GAAG,EAAC,QAAsE;AAA5D,IAAA,KAAK,EAAE,KAAA,CAAA,KAAqD;AAA7C,IAAA,MAAM,EAAE,KAAA,CAAA,MAAqC;AAA5B,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,UAAA,IAAA,QAAA,CAAA,UAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAAuB,GAAlF,E,IAAA,E;;AAAA,I,mBAAA,CACE,CAFN,C","sourcesContent":["<template>\n    <div class=\"img-verify\">\n        <canvas ref=\"verify\" :width=\"width\" :height=\"height\" @click=\"handleDraw\"></canvas>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                pool: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890',\n                width: 140,\n                height: 40,\n                imgCode: ''\n            }\n        },\n\n        methods: {\n            // 初始化绘制图片验证码\n            init() {\n                this.imgCode = this.draw()\n            },\n\n            // 点击图片重新绘制\n            handleDraw() {\n                this.imgCode = this.draw()\n            },\n\n            // 随机数\n            randomNum(min, max) {\n                return parseInt(Math.random() * (max - min) + min)\n            },\n\n            // 随机颜色\n            randomColor(min, max) {\n                const r = this.randomNum(min, max)\n                const g = this.randomNum(min, max)\n                const b = this.randomNum(min, max)\n                return `rgb(${r},${g},${b})`\n            },\n\n            // 绘制图片\n            draw() {\n                // 3.填充背景颜色，背景颜色要浅一点\n                const ctx = this.$refs.verify.getContext('2d')\n                // 填充颜色\n                ctx.fillStyle = this.randomColor(180, 230)\n                // 填充的位置\n                ctx.fillRect(0, 0, this.width, this.height)\n                // 定义paramText\n                let imgCode = ''\n                // 4.随机产生字符串，并且随机旋转\n                for (let i = 0; i < 4; i++) {\n                    // 随机的四个字\n                    const text = this.pool[this.randomNum(0, this.pool.length)]\n                    imgCode += text\n                    // 随机的字体大小\n                    const fontSize = this.randomNum(18, 40)\n                    // 字体随机的旋转角度\n                    const deg = this.randomNum(-30, 30)\n                    /**\n                     * 绘制文字并让四个文字在不同的位置显示的思路 :\n                     * 1、定义字体\n                     * 2、定义对齐方式\n                     * 3、填充不同的颜色\n                     * 4、保存当前的状态（以防止以上的状态受影响）\n                     * 5、平移translate()\n                     * 6、旋转 rotate()\n                     * 7、填充文字\n                     * 8、restore出栈\n                     */\n                    ctx.font = fontSize + 'px Simhei'\n                    ctx.textBaseline = 'top'\n                    ctx.fillStyle = this.randomColor(80, 150)\n                    /**\n                     * save() 方法把当前状态的一份拷贝压入到一个保存图像状态的栈中。\n                     * 这就允许您临时地改变图像状态，\n                     * 然后，通过调用 restore() 来恢复以前的值。\n                     * save是入栈，restore是出栈。\n                     * 用来保存Canvas的状态。save之后，可以调用Canvas的平移、放缩、旋转、错切、裁剪等操作。 restore：用来恢复Canvas之前保存的状态。防止save后对Canvas执行的操作对后续的绘制有影响。\n                     *\n                     */\n                    ctx.save()\n                    ctx.translate(30 * i + 15, 15)\n                    ctx.rotate((deg * Math.PI) / 180)\n                    // fillText() 方法在画布上绘制填色的文本。文本的默认颜色是黑色。\n                    // 请使用 font 属性来定义字体和字号，并使用 fillStyle 属性以另一种颜色/渐变来渲染文本。\n                    // context.fillText(text,x,y,maxWidth);\n                    ctx.fillText(text, -15 + 5, -15)\n                    ctx.restore()\n                }\n\n                // 5.随机产生5条干扰线,干扰线的颜色要浅一点\n                for (let i = 0; i < 5; i++) {\n                    ctx.beginPath()\n                    ctx.moveTo(this.randomNum(0, this.width), this.randomNum(0, this.height))\n                    ctx.lineTo(this.randomNum(0, this.width), this.randomNum(0, this.height))\n                    ctx.strokeStyle = this.randomColor(180, 230)\n                    ctx.closePath()\n                    ctx.stroke()\n                }\n\n                // 6.随机产生40个干扰的小点\n                for (let i = 0; i < 40; i++) {\n                    ctx.beginPath()\n                    ctx.arc(this.randomNum(0, this.width), this.randomNum(0, this.height), 1, 0, 2 * Math.PI)\n                    ctx.closePath()\n                    ctx.fillStyle = this.randomColor(150, 200)\n                    ctx.fill()\n                }\n                return imgCode;\n            }\n        },\n        mounted() {\n            this.init()\n        }\n    }\n</script>\n<style>\n    .img-verify canvas {\n        cursor: pointer;\n        border-radius: 18px;\n    }\n</style>"],"sourceRoot":""}]}