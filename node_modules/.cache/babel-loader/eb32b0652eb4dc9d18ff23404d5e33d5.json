{"remainingRequest":"/home/nothing/data/vue/mall-vue3-manage/node_modules/babel-loader/lib/index.js!/home/nothing/data/vue/mall-vue3-manage/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/nothing/data/vue/mall-vue3-manage/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/nothing/data/vue/mall-vue3-manage/src/components/VueImageVerify.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/nothing/data/vue/mall-vue3-manage/src/components/VueImageVerify.vue","mtime":1615423561118},{"path":"/home/nothing/data/vue/mall-vue3-manage/node_modules/cache-loader/dist/cjs.js","mtime":1589968278364},{"path":"/home/nothing/data/vue/mall-vue3-manage/node_modules/babel-loader/lib/index.js","mtime":1614068612755},{"path":"/home/nothing/data/vue/mall-vue3-manage/node_modules/cache-loader/dist/cjs.js","mtime":1589968278364},{"path":"/home/nothing/data/vue/mall-vue3-manage/node_modules/vue-loader-v16/dist/index.js","mtime":1614935255022}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbC5qcyI7CmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgcG9vbDogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMTIzNDU2Nzg5MCcsCiAgICAgIHdpZHRoOiAxNDAsCiAgICAgIGhlaWdodDogNDAsCiAgICAgIGltZ0NvZGU6ICcnCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgLy8g5Yid5aeL5YyW57uY5Yi25Zu+54mH6aqM6K+B56CBCiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkgewogICAgICB0aGlzLmltZ0NvZGUgPSB0aGlzLmRyYXcoKTsKICAgIH0sCiAgICAvLyDngrnlh7vlm77niYfph43mlrDnu5jliLYKICAgIGhhbmRsZURyYXc6IGZ1bmN0aW9uIGhhbmRsZURyYXcoKSB7CiAgICAgIHRoaXMuaW1nQ29kZSA9IHRoaXMuZHJhdygpOwogICAgfSwKICAgIC8vIOmaj+acuuaVsAogICAgcmFuZG9tTnVtOiBmdW5jdGlvbiByYW5kb21OdW0obWluLCBtYXgpIHsKICAgICAgcmV0dXJuIHBhcnNlSW50KE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbik7CiAgICB9LAogICAgLy8g6ZqP5py66aKc6ImyCiAgICByYW5kb21Db2xvcjogZnVuY3Rpb24gcmFuZG9tQ29sb3IobWluLCBtYXgpIHsKICAgICAgdmFyIHIgPSB0aGlzLnJhbmRvbU51bShtaW4sIG1heCk7CiAgICAgIHZhciBnID0gdGhpcy5yYW5kb21OdW0obWluLCBtYXgpOwogICAgICB2YXIgYiA9IHRoaXMucmFuZG9tTnVtKG1pbiwgbWF4KTsKICAgICAgcmV0dXJuICJyZ2IoIi5jb25jYXQociwgIiwiKS5jb25jYXQoZywgIiwiKS5jb25jYXQoYiwgIikiKTsKICAgIH0sCiAgICAvLyDnu5jliLblm77niYcKICAgIGRyYXc6IGZ1bmN0aW9uIGRyYXcoKSB7CiAgICAgIC8vIDMu5aGr5YWF6IOM5pmv6aKc6Imy77yM6IOM5pmv6aKc6Imy6KaB5rWF5LiA54K5CiAgICAgIHZhciBjdHggPSB0aGlzLiRyZWZzLnZlcmlmeS5nZXRDb250ZXh0KCcyZCcpOyAvLyDloavlhYXpopzoibIKCiAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLnJhbmRvbUNvbG9yKDE4MCwgMjMwKTsgLy8g5aGr5YWF55qE5L2N572uCgogICAgICBjdHguZmlsbFJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpOyAvLyDlrprkuYlwYXJhbVRleHQKCiAgICAgIHZhciBpbWdDb2RlID0gJyc7IC8vIDQu6ZqP5py65Lqn55Sf5a2X56ym5Liy77yM5bm25LiU6ZqP5py65peL6L2sCgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykgewogICAgICAgIC8vIOmaj+acuueahOWbm+S4quWtlwogICAgICAgIHZhciB0ZXh0ID0gdGhpcy5wb29sW3RoaXMucmFuZG9tTnVtKDAsIHRoaXMucG9vbC5sZW5ndGgpXTsKICAgICAgICBpbWdDb2RlICs9IHRleHQ7IC8vIOmaj+acuueahOWtl+S9k+Wkp+WwjwoKICAgICAgICB2YXIgZm9udFNpemUgPSB0aGlzLnJhbmRvbU51bSgxOCwgNDApOyAvLyDlrZfkvZPpmo/mnLrnmoTml4vovazop5LluqYKCiAgICAgICAgdmFyIGRlZyA9IHRoaXMucmFuZG9tTnVtKC0zMCwgMzApOwogICAgICAgIC8qKgogICAgICAgICAqIOe7mOWItuaWh+Wtl+W5tuiuqeWbm+S4quaWh+Wtl+WcqOS4jeWQjOeahOS9jee9ruaYvuekuueahOaAnei3ryA6CiAgICAgICAgICogMeOAgeWumuS5ieWtl+S9kwogICAgICAgICAqIDLjgIHlrprkuYnlr7npvZDmlrnlvI8KICAgICAgICAgKiAz44CB5aGr5YWF5LiN5ZCM55qE6aKc6ImyCiAgICAgICAgICogNOOAgeS/neWtmOW9k+WJjeeahOeKtuaAge+8iOS7pemYsuatouS7peS4iueahOeKtuaAgeWPl+W9seWTje+8iQogICAgICAgICAqIDXjgIHlubPnp7t0cmFuc2xhdGUoKQogICAgICAgICAqIDbjgIHml4vovawgcm90YXRlKCkKICAgICAgICAgKiA344CB5aGr5YWF5paH5a2XCiAgICAgICAgICogOOOAgXJlc3RvcmXlh7rmoIgKICAgICAgICAgKi8KCiAgICAgICAgY3R4LmZvbnQgPSBmb250U2l6ZSArICdweCBTaW1oZWknOwogICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJzsKICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5yYW5kb21Db2xvcig4MCwgMTUwKTsKICAgICAgICAvKioKICAgICAgICAgKiBzYXZlKCkg5pa55rOV5oqK5b2T5YmN54q25oCB55qE5LiA5Lu95ou36LSd5Y6L5YWl5Yiw5LiA5Liq5L+d5a2Y5Zu+5YOP54q25oCB55qE5qCI5Lit44CCCiAgICAgICAgICog6L+Z5bCx5YWB6K645oKo5Li05pe25Zyw5pS55Y+Y5Zu+5YOP54q25oCB77yMCiAgICAgICAgICog54S25ZCO77yM6YCa6L+H6LCD55SoIHJlc3RvcmUoKSDmnaXmgaLlpI3ku6XliY3nmoTlgLzjgIIKICAgICAgICAgKiBzYXZl5piv5YWl5qCI77yMcmVzdG9yZeaYr+WHuuagiOOAggogICAgICAgICAqIOeUqOadpeS/neWtmENhbnZhc+eahOeKtuaAgeOAgnNhdmXkuYvlkI7vvIzlj6/ku6XosIPnlKhDYW52YXPnmoTlubPnp7vjgIHmlL7nvKnjgIHml4vovazjgIHplJnliIfjgIHoo4HliarnrYnmk43kvZzjgIIgcmVzdG9yZe+8mueUqOadpeaBouWkjUNhbnZhc+S5i+WJjeS/neWtmOeahOeKtuaAgeOAgumYsuatonNhdmXlkI7lr7lDYW52YXPmiafooYznmoTmk43kvZzlr7nlkI7nu63nmoTnu5jliLbmnInlvbHlk43jgIIKICAgICAgICAgKgogICAgICAgICAqLwoKICAgICAgICBjdHguc2F2ZSgpOwogICAgICAgIGN0eC50cmFuc2xhdGUoMzAgKiBpICsgMTUsIDE1KTsKICAgICAgICBjdHgucm90YXRlKGRlZyAqIE1hdGguUEkgLyAxODApOyAvLyBmaWxsVGV4dCgpIOaWueazleWcqOeUu+W4g+S4iue7mOWItuWhq+iJsueahOaWh+acrOOAguaWh+acrOeahOm7mOiupOminOiJsuaYr+m7keiJsuOAggogICAgICAgIC8vIOivt+S9v+eUqCBmb250IOWxnuaAp+adpeWumuS5ieWtl+S9k+WSjOWtl+WPt++8jOW5tuS9v+eUqCBmaWxsU3R5bGUg5bGe5oCn5Lul5Y+m5LiA56eN6aKc6ImyL+a4kOWPmOadpea4suafk+aWh+acrOOAggogICAgICAgIC8vIGNvbnRleHQuZmlsbFRleHQodGV4dCx4LHksbWF4V2lkdGgpOwoKICAgICAgICBjdHguZmlsbFRleHQodGV4dCwgLTE1ICsgNSwgLTE1KTsKICAgICAgICBjdHgucmVzdG9yZSgpOwogICAgICB9IC8vIDUu6ZqP5py65Lqn55SfNeadoeW5suaJsOe6vyzlubLmibDnur/nmoTpopzoibLopoHmtYXkuIDngrkKCgogICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgNTsgX2krKykgewogICAgICAgIGN0eC5iZWdpblBhdGgoKTsKICAgICAgICBjdHgubW92ZVRvKHRoaXMucmFuZG9tTnVtKDAsIHRoaXMud2lkdGgpLCB0aGlzLnJhbmRvbU51bSgwLCB0aGlzLmhlaWdodCkpOwogICAgICAgIGN0eC5saW5lVG8odGhpcy5yYW5kb21OdW0oMCwgdGhpcy53aWR0aCksIHRoaXMucmFuZG9tTnVtKDAsIHRoaXMuaGVpZ2h0KSk7CiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5yYW5kb21Db2xvcigxODAsIDIzMCk7CiAgICAgICAgY3R4LmNsb3NlUGF0aCgpOwogICAgICAgIGN0eC5zdHJva2UoKTsKICAgICAgfSAvLyA2Lumaj+acuuS6p+eUnzQw5Liq5bmy5omw55qE5bCP54K5CgoKICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgNDA7IF9pMisrKSB7CiAgICAgICAgY3R4LmJlZ2luUGF0aCgpOwogICAgICAgIGN0eC5hcmModGhpcy5yYW5kb21OdW0oMCwgdGhpcy53aWR0aCksIHRoaXMucmFuZG9tTnVtKDAsIHRoaXMuaGVpZ2h0KSwgMSwgMCwgMiAqIE1hdGguUEkpOwogICAgICAgIGN0eC5jbG9zZVBhdGgoKTsKICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5yYW5kb21Db2xvcigxNTAsIDIwMCk7CiAgICAgICAgY3R4LmZpbGwoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGltZ0NvZGU7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5pbml0KCk7CiAgfQp9Ow=="},{"version":3,"sources":["/home/nothing/data/vue/mall-vue3-manage/src/components/VueImageVerify.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"img-verify\">\n        <canvas ref=\"verify\" :width=\"width\" :height=\"height\" @click=\"handleDraw\"></canvas>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                pool: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890',\n                width: 140,\n                height: 40,\n                imgCode: ''\n            }\n        },\n\n        methods: {\n            // 初始化绘制图片验证码\n            init() {\n                this.imgCode = this.draw()\n            },\n\n            // 点击图片重新绘制\n            handleDraw() {\n                this.imgCode = this.draw()\n            },\n\n            // 随机数\n            randomNum(min, max) {\n                return parseInt(Math.random() * (max - min) + min)\n            },\n\n            // 随机颜色\n            randomColor(min, max) {\n                const r = this.randomNum(min, max)\n                const g = this.randomNum(min, max)\n                const b = this.randomNum(min, max)\n                return `rgb(${r},${g},${b})`\n            },\n\n            // 绘制图片\n            draw() {\n                // 3.填充背景颜色，背景颜色要浅一点\n                const ctx = this.$refs.verify.getContext('2d')\n                // 填充颜色\n                ctx.fillStyle = this.randomColor(180, 230)\n                // 填充的位置\n                ctx.fillRect(0, 0, this.width, this.height)\n                // 定义paramText\n                let imgCode = ''\n                // 4.随机产生字符串，并且随机旋转\n                for (let i = 0; i < 4; i++) {\n                    // 随机的四个字\n                    const text = this.pool[this.randomNum(0, this.pool.length)]\n                    imgCode += text\n                    // 随机的字体大小\n                    const fontSize = this.randomNum(18, 40)\n                    // 字体随机的旋转角度\n                    const deg = this.randomNum(-30, 30)\n                    /**\n                     * 绘制文字并让四个文字在不同的位置显示的思路 :\n                     * 1、定义字体\n                     * 2、定义对齐方式\n                     * 3、填充不同的颜色\n                     * 4、保存当前的状态（以防止以上的状态受影响）\n                     * 5、平移translate()\n                     * 6、旋转 rotate()\n                     * 7、填充文字\n                     * 8、restore出栈\n                     */\n                    ctx.font = fontSize + 'px Simhei'\n                    ctx.textBaseline = 'top'\n                    ctx.fillStyle = this.randomColor(80, 150)\n                    /**\n                     * save() 方法把当前状态的一份拷贝压入到一个保存图像状态的栈中。\n                     * 这就允许您临时地改变图像状态，\n                     * 然后，通过调用 restore() 来恢复以前的值。\n                     * save是入栈，restore是出栈。\n                     * 用来保存Canvas的状态。save之后，可以调用Canvas的平移、放缩、旋转、错切、裁剪等操作。 restore：用来恢复Canvas之前保存的状态。防止save后对Canvas执行的操作对后续的绘制有影响。\n                     *\n                     */\n                    ctx.save()\n                    ctx.translate(30 * i + 15, 15)\n                    ctx.rotate((deg * Math.PI) / 180)\n                    // fillText() 方法在画布上绘制填色的文本。文本的默认颜色是黑色。\n                    // 请使用 font 属性来定义字体和字号，并使用 fillStyle 属性以另一种颜色/渐变来渲染文本。\n                    // context.fillText(text,x,y,maxWidth);\n                    ctx.fillText(text, -15 + 5, -15)\n                    ctx.restore()\n                }\n\n                // 5.随机产生5条干扰线,干扰线的颜色要浅一点\n                for (let i = 0; i < 5; i++) {\n                    ctx.beginPath()\n                    ctx.moveTo(this.randomNum(0, this.width), this.randomNum(0, this.height))\n                    ctx.lineTo(this.randomNum(0, this.width), this.randomNum(0, this.height))\n                    ctx.strokeStyle = this.randomColor(180, 230)\n                    ctx.closePath()\n                    ctx.stroke()\n                }\n\n                // 6.随机产生40个干扰的小点\n                for (let i = 0; i < 40; i++) {\n                    ctx.beginPath()\n                    ctx.arc(this.randomNum(0, this.width), this.randomNum(0, this.height), 1, 0, 2 * Math.PI)\n                    ctx.closePath()\n                    ctx.fillStyle = this.randomColor(150, 200)\n                    ctx.fill()\n                }\n                return imgCode;\n            }\n        },\n        mounted() {\n            this.init()\n        }\n    }\n</script>\n<style>\n    .img-verify canvas {\n        cursor: pointer;\n        border-radius: 18px;\n    }\n</style>"],"sourceRoot":""}]}